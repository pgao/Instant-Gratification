# Create your views here.
from django.http import HttpResponse
from django.shortcuts import render_to_response

import hashlib
import binascii
import time
import thrift.protocol.TBinaryProtocol as TBinaryProtocol
import thrift.transport.THttpClient as THttpClient
import evernote.edam.userstore.UserStore as UserStore
import evernote.edam.userstore.constants as UserStoreConstants
import evernote.edam.notestore.NoteStore as NoteStore
import evernote.edam.type.ttypes as Types
import evernote.edam.error.ttypes as Errors

from random import choice

from HTMLParser import HTMLParser

from django.utils import simplejson

from bs4 import BeautifulSoup

# To run (Unix):
#   export PYTHONPATH=evernote-sdk-python/lib

#sandbox token
#authToken = "S=s1:U=33089:E=141af8d6b08:C=13a57dc3f08:P=1cd:A=en-devtoken:H=9b2647c2070b809a9bf6e91595cc891d"

authToken = "S=s171:U=12a382e:E=1422073a7d5:C=13ac8c27bd5:P=1cd:A=en-devtoken:H=bf647a2cabb4709c78542063e5ed44b8"
noteStoreUrl = ""

#evernoteHost = "sandbox.evernote.com"
evernoteHost = "www.evernote.com"
userStoreUri = "https://" + evernoteHost + "/edam/user"

userStoreHttpClient = THttpClient.THttpClient(userStoreUri)
userStoreProtocol = TBinaryProtocol.TBinaryProtocol(userStoreHttpClient)
userStore = UserStore.Client(userStoreProtocol)

noteStoreUrl = userStore.getNoteStoreUrl(authToken)

noteStoreHttpClient = THttpClient.THttpClient(noteStoreUrl)
noteStoreProtocol = TBinaryProtocol.TBinaryProtocol(noteStoreHttpClient)
noteStore = NoteStore.Client(noteStoreProtocol)

print "successfully authenticated."

quotes = None
music = None
debug = False

class MLStripper(HTMLParser):
    def __init__(self):
        self.reset()
        self.fed = []
    def handle_data(self, d):
        self.fed.append(d)
    def get_data(self):
        return ''.join(self.fed)

def strip_tags(html):
    s = MLStripper()
    s.feed(html)
    return s.get_data()


def getQuotesString():
	notebooks = noteStore.listNotebooks(authToken)
	print "Found ", len(notebooks), " notebooks:"
	for notebook in notebooks:
	    print "  * ", notebook.name
	#note = noteStore.getNote(authToken, )
	notes = noteStore.findNotes(authToken, NoteStore.NoteFilter(), 0, 10)
	#print "first note is ", notes.notes[1]
	quoteNote = None
	for note in notes.notes:
		#print note
		print "note title is ", note.title
		if note.title == "Quotable Stuff":
			quoteNote = note
	quoteNote = noteStore.getNote(authToken, quoteNote.guid, withContent=True, withResourcesData=False, withResourcesRecognition=False, withResourcesAlternateData=False)
	return quoteNote.content

def getMusicString():
	notebooks = noteStore.listNotebooks(authToken)
	print "Found ", len(notebooks), " notebooks:"
	for notebook in notebooks:
	    print "  * ", notebook.name
	#note = noteStore.getNote(authToken, )
	notes = noteStore.findNotes(authToken, NoteStore.NoteFilter(), 0, 10)
	#print "notes are ", notes
	#print "first note is ", notes.notes[1]
	quoteNote = None
	for note in notes.notes:
		#print note
		#print "note title is ", note.title
		if note.title == "Music":
			quoteNote = note
	quoteNote = noteStore.getNote(authToken, quoteNote.guid, withContent=True, withResourcesData=False, 
		withResourcesRecognition=False, withResourcesAlternateData=False)
	return quoteNote.content

def formatQuotesString(quotesString):
	soup = BeautifulSoup(quotesString)
	#quotes = soup.get_text()
	quotes = [text for text in soup.stripped_strings]
	for quoteIndex in range(len(quotes)):
		quote = quotes[quoteIndex]
		if quote[0] == '(':
			rightParen = quote.find(')')
			firstSlash = quote.find('/')
			if firstSlash > 0 and firstSlash < rightParen:
				quotes[quoteIndex] = quote[rightParen + 1:]
	#print "quotes are ", quotes
	return quotes


def index(request):
	return render_to_response('index.html')

def newQuote(request):
	global quotes
	if not quotes:
		quotes = formatQuotesString(getQuotesString())
	quote = [choice(quotes)]

	response_data = {}
	response_data['quotes'] = quote

	return HttpResponse(simplejson.dumps(response_data), mimetype="application/json")


def searchFor(request, searchString):
	global quotes
	returnable = []

	if not quotes:
		quotes = formatQuotesString(getQuotesString())

	returnable = filter(lambda a: searchString.decode('utf8').lower() in a.decode('utf8').lower(), quotes)

	if debug:
		print returnable

	if len(returnable) > 20:
		quote = returnable[-20:]
	else:
		quote = returnable

	print quote

	response_data = {}
	response_data['quotes'] = quote

	return HttpResponse(simplejson.dumps(response_data), mimetype="application/json")

def profanityFilter(request):
	global quotes
	returnable = []
	if not quotes:
		quotes = formatQuotesString(getQuotesString())
	returnable = filter(lambda a: "shit" in a or "fuck" in a or "hell" in a or "damn" in a or "ass" in a or "bitch" in a or "bastard" in a
			or "prick" in a, quotes)

	if debug:
		print returnable

	quote = [choice(returnable)]

	print quote

	response_data = {}
	response_data['quotes'] = quote

	return HttpResponse(simplejson.dumps(response_data), mimetype="application/json")

def linkFilter(request):
	global quotes
	returnable = []
	if not quotes:
		quotes = formatQuotesString(getQuotesString())
	returnable = filter(lambda a: "http://" in a, quotes)
	quote = [choice(returnable)]


	response_data = {}
	response_data['quotes'] = quote

	return HttpResponse(simplejson.dumps(response_data), mimetype="application/json")

def quoteFilter(request):
	global quotes
	returnable = []
	if not quotes:
		quotes = formatQuotesString(getQuotesString())
	returnable = filter(lambda a: "http://" not in a, quotes)
	quote = [choice(returnable)]


	response_data = {}
	response_data['quotes'] = quote

	return HttpResponse(simplejson.dumps(response_data), mimetype="application/json")

def musicFilter(request):
	global music
	if not music:
		music = formatQuotesString(getMusicString())
	print "music is ", music
	quote = ""
	while "http" not in quote:	
		print quote
		quote = [choice(music)]

	response_data = {}
	response_data['quotes'] = quote

	return HttpResponse(simplejson.dumps(response_data), mimetype="application/json")

def newFilter(request):
	global quotes
	returnable = []
	if not quotes:
		quotes = formatQuotesString(getQuotesString())
	returnable = quotes[-50:]
	quote = [choice(returnable)]

	response_data = {}
	response_data['quotes'] = quote

	return HttpResponse(simplejson.dumps(response_data), mimetype="application/json")

def style(request):
	return render_to_response("style.css")

def channel(request):
	return render_to_response("channel.html")
